import pandas as pd
import os
import datetime
import date_functions as datef
import path_functions as pathf
import file_functions as filef
import dotenv
import gspread
import v2_fb as fb


dotenv.load_dotenv()

hj = datetime.datetime.now()
d1 = datef.dmenos(hj).date()

# #Para puxar de uma data específica

# d1 = datetime.datetime(2025, 3, 2).date()

datatxt, dataname, datasql, dataname2, dataname3, dataname4 = datef.dates(d1)

c_list = [
    "alamanda",
    "alanis",
    "dadri",
    "french",
    "haut",
    "infini",
    "kle",
    "mixxon",
    "morina",
    "mun",
    "muna",
    "nobu",
    "othergirls",
    "presage",
    "pueri",
    "rery",
    "talgui",
    "tob",
    "una",
    "uniquechic",
    "vogabox",
]

# c_list = ["rery"]

# DICIONÁRIO DE NOMES

dic_nomes = {
    "alamanda": "Alamanda",
    "alanis": "Alanis",
    "dadri": "Dadri",
    "french": "French",
    "haut": "Haut",
    "infini": "Infini",
    "kle": "Kle",
    "mixxon": "Mixxon",
    "morina": "Morina",
    "mun": "Mun",
    "muna": "Muna",
    "nobu": "Nobu",
    "othergirls": "Other Girls",
    "paconcept": "P.A Concept",
    "presage": "Presage",
    "pueri": "Pueri Santi",
    "rery": "Rery",
    "talgui": "Talgui",
    "tob": "Tob",
    "una": "Una",
    "uniquechic": "Unique Chic",
    "vogabox": "Vogabox",
}

##### DICTS PARA SLICE DO CODIGO SKU #####

c_list_sku_0 = {"Cliente": ["infini", "luvic", "mun"], "Index": 0}
c_list_sku_7 = {"Cliente": ["nobu"], "Index": 7}
c_list_sku_8 = {
    "Cliente": ["alanis", "dadri", "othergirls", "talgui"],
    "Index": 8,
}
c_list_sku_9 = {"Cliente": ["ajobrand", "french"], "Index": 9}
c_list_sku_15 = {
    "Cliente": [
        "alamanda",
        "mixxon",
        "haut",
        "kle",
        "morina",
        "muna",
        "paconcept",
        "presage",
        "pueri",
        "rery",
        "tob",
        "una",
        "uniquechic",
        "vogabox",
    ],
    "Index": 40,
}  ###get all sku, doesnt need to slice

#### FILE PATHS ####

d_path = pathf.dl_folder()
f_path = rf"{os.getenv('path_mage')}m&p\Relatorios Diarios\{dataname}"

# In[1]: TRANSFORM XLS INTO XLSX FILES ###

filef.fix_prod(f_path)
filef.fix_esto(f_path)

# %% MODELAR DATAFRAME DE ESTOQUE E VENDAS

############################### ESTOQUE ##################################

# SKU PARA COD. MODELO + COR

c_list_sku = [
    c_list_sku_0,
    c_list_sku_7,
    c_list_sku_8,
    c_list_sku_9,
    c_list_sku_15,
]

for cliente in c_list:
    f_estoque_path = rf"{os.getenv('path_mage')}m&p\Relatorios Diarios\{dataname}\{cliente}_Estoque_{dataname}.xlsx"
    df_estoque = pd.read_excel(f_estoque_path, dtype={"Código": str})

    for c_sku in c_list_sku:
        if cliente in c_sku["Cliente"]:
            index = c_sku["Index"]
            if index == 0:
                df_estoque["Cod. Modelo + Cor"] = (
                    df_estoque["Código"]
                    .astype(str)
                    .apply(lambda x: x.split("-")[0])
                )
            else:
                df_estoque["Cod. Modelo + Cor"] = df_estoque[
                    "Código"
                ].str.slice(0, index)
            break
    else:
        print(f"The value '{cliente}' is not present in any c_list_sku.")

    # GROUP STOCK BY 'COD. MODELO + COR'

    df_estoque_grouped = df_estoque.groupby(["Cod. Modelo + Cor"]).agg(
        {"Quantidade": "sum"}
    )

    # ESTOQUE + PRECOS

    # IMPORT EXCEL PRODUTOS TO FIX AND ORGANIZE
    f_produtos_path = rf"{os.getenv('path_mage')}m&p\Relatorios Diarios\{dataname}\{cliente}_Produtos_{dataname}.xlsx"
    df_produtos = pd.read_excel(
        f_produtos_path, dtype={"Codigo SKU": str}
    ).rename(
        columns={
            "Codigo SKU": "Cod. Modelo + Cor",
            "Preco": "Preco Atual",
            "Preço Anterior": "Preco Anterior",
            "Preco de custo": "Preco de Custo",
        }
    )
    df_produtos["Desconto"] = 1 - (
        df_produtos["Preco Atual"] / df_produtos["Preco Anterior"]
    )

    # CLIENTS WITH ONLY PRODUTO FILHO

    if cliente == "kle":
        for c_sku in c_list_sku:
            if cliente in c_sku["Cliente"]:
                index = c_sku["Index"]
                if index == 0:
                    df_produtos["Cod. Modelo + Cor"] = df_produtos[
                        "Cod. Modelo + Cor"
                    ].apply(lambda x: x.split("-")[0])
                else:
                    df_produtos["Cod. Modelo + Cor"] = df_produtos[
                        "Cod. Modelo + Cor"
                    ].str.slice(0, index)
                break
        else:
            print(f"The value '{cliente}' is not present in any c_list_sku.")

    if cliente == "kle":
        df_produtos3 = df_produtos.drop_duplicates(
            subset=["Cod. Modelo + Cor"]
        )

        # Merge the DataFrames on 'Cod. Modelo + Cor'
        estoque_preco_df = pd.merge(
            df_estoque_grouped,
            df_produtos3,
            on="Cod. Modelo + Cor",
            how="left",
        )

    else:
        # Merge the DataFrames on 'Cod. Modelo + Cor'
        estoque_preco_df = pd.merge(
            df_estoque_grouped,
            df_produtos,
            on="Cod. Modelo + Cor",
            how="left",
        )

    estoque_preco_df["Poder de Venda"] = (
        estoque_preco_df["Quantidade"] * estoque_preco_df["Preco Atual"]
    )
    estoque_preco_df["Custo Total"] = (
        estoque_preco_df["Quantidade"] * estoque_preco_df["Preco de Custo"]
    )
    estoque_preco_df.dtypes

    #### STOCK STOCK VALUE, QUANTITIY, MKP

    # EXCLUIR CÓDIGOS QUE NÃO DEVEM SER SOMADOS AO CÁLCULO DE ESTOQUE POR CLIENTE

    if cliente == "mixxon":
        codigos_excluir = {
            "99287031",
            "99287014",
            "99287001",
            "99285031",
            "12079011",
            "12079008",
            "99285014",
            "12079009",
            "99285011",
            "10617001",
            "99285001",
            "10617003",
            "10617008",
            "99270138",
            "10617021",
            "14265001",
            "14265003",
            "13075002",
            "13075003",
            "13075008",
            "13075021",
            "14293005",
            "14293011",
            "14318003",
            "14318007",
            "14318014",
            "14321001",
            "99270014",
            "14321008",
            "99270008",
            "14321029",
            "99270001",
            "14322001",
            "99237031",
            "99237014",
            "14327008",
            "14337011",
            "99237005",
            "99237001",
            "14337023",
            "97589001",
            "96961001",
            "96950003",
            "31068017",
            "31068012",
            "31067052",
            "31067034",
            "31067011",
            "14327028",
            "14344004",
            "14344005",
            "14344007",
            "14349001",
            "14349005",
            "14349021",
            "14350001",
            "14350005",
            "14350021",
            "14335011",
            "14335014",
            "31064034",
            "14335023",
            "31064005",
            "14351001",
            "31063021",
            "14351005",
            "14351030",
            "31063012",
            "31063011",
            "31059004",
            "28492007",
            "28492004",
            "28476058",
            "28476004",
            "28471007",
            "28464001",
            "14358003",
            "28445021",
            "14358004",
            "14358008",
            "14360003",
            "28445014",
            "14360004",
            "28445003",
            "28443092",
            "14360008",
            "28443030",
            "28443001",
            "14374001",
            "14374003",
            "14374021",
            "14375001",
            "14375003",
            "14375011",
            "14375021",
            "14380001",
            "14380008",
            "14380011",
            "14380031",
            "14381001",
            "14381008",
            "14381011",
            "14381031",
            "14386001",
            "14386006",
            "25661003",
            "25661004",
            "25851001",
            "25851030",
            "25851092",
            "26080007",
            "26106177",
            "26106210",
            "26106221",
            "27045003",
            "27045031",
            "27088001",
            "27088030",
            "27088092",
            "27093001",
            "27093031",
            "27093098",
            "28281003",
            "28281008",
            "28281014",
            "28282003",
            "28282007",
            "28442030",
            "28282008",
            "28282014",
            "28442007",
            "28440014",
            "28313005",
            "28313015",
            "14293034",
            "25661031",
            "28321003",
            "28321008",
            "28321039",
            "28370005",
            "97589014",
            "97589008",
            "97589138",
            "96961013",
            "96961012",
            "28370012",
            "96961031",
            "96950014",
            "28370031",
            "96950031",
            "28370033",
            "28370034",
            "28379001",
            "28379021",
            "28388001",
            "28388009",
            "28389011",
            "28389012",
            "28389021",
            "28438001",
            "28438011",
            "28440003",
            "28440011",
            "14336005",
            "14336011",
            "14336014",
            "14343001",
            "10594001",
            "10594009",
            "14283002",
            "14283009",
            "14283039",
            "14328001",
            "14328031",
            "14328005",
            "14328008",
            "14328028",
            "14329001",
            "14329005",
            "14329008",
            "14329031",
            "14371001",
            "14371005",
            "14397003",
            "14397007",
            "14397011",
            "14397037",
            "28339005",
            "28339008",
            "28339011",
            "28444096",
            "28444106",
            "99310001",
            "99310003",
            "99287138",
            "17037002",
            "17037003",
            "17037009",
            "23172001",
            "23172031",
            "23172098",
            "25868031",
            "28380001",
            "10576005",
            "10576008",
            "10576014",
            "28437009",
            "28437001",
            "10581011",
            "10581001",
            "10581009",
            "11058001",
            "11058009",
            "11058011",
            "14326001",
            "14326009",
            "14326011",
            "14357001",
            "14357004",
            "14363001",
            "14363003",
            "14363008",
            "14363012",
            "14364001",
            "14364003",
            "14364008",
            "14364032",
            "14366001",
            "14366009",
            "14367001",
            "14367003",
            "14367011",
            "14367021",
            "14369008",
            "14369011",
            "29082004",
            "28288008",
            "28288011",
            "28288021",
            "28312004",
            "28312005",
            "28312011",
            "28312014",
            "28340008",
            "28340011",
            "96937011",
            "96937014",
            "99388005",
            "10590001",
            "10590003",
            "10590008",
            "10590012",
            "11064001",
            "11064005",
            "11064008",
            "11064011",
            "11063001",
            "11063003",
            "11063008",
            "11063012",
            "14325003",
            "14325005",
            "14325023",
            "25668004",
            "25668005",
            "25943004",
            "10608001",
            "10608005",
            "10608011",
            "10608031",
            "28454011",
            "28454003",
            "28340005",
            "28492003",
            "10467021",
            "10467003",
            "10467023",
            "10546008",
            "10546011",
            "10546021",
            "10550001",
            "10550003",
            "10550008",
            "11055003",
            "11055008",
            "11055009",
            "10616003",
            "10616008",
            "10616011",
            "10631002",
            "10631007",
            "10631011",
            "14281001",
            "14281002",
            "14281003",
            "14295011",
            "14295023",
            "14295039",
            "14296011",
            "14296023",
            "14296039",
            "14306001",
            "14306003",
            "14306008",
            "14307003",
            "14313003",
            "14313008",
            "14313009",
            "14333001",
            "14333005",
            "14333008",
            "14352001",
            "14352054",
            "14353001",
            "14353003",
            "25645005",
            "25645008",
            "25645011",
            "25653005",
            "25653011",
            "25653023",
            "25659004",
            "25659005",
            "25713005",
            "25713008",
            "25713011",
            "25713028",
            "25857001",
            "25857003",
            "25857004",
            "25870004",
            "25870174",
            "25870011",
            "25870172",
            "25988219",
            "25988220",
            "28294002",
            "28295001",
            "28295004",
            "28296001",
            "28296002",
            "28299011",
            "28299014",
            "28299023",
            "28323001",
            "28323002",
            "28490007",
            "28490023",
            "31051011",
            "31051014",
            "31051023",
            "10592001",
            "10592012",
            "10598003",
            "10598021",
            "10612001",
            "10612003",
            "10612021",
            "11065001",
            "11065003",
            "11065021",
            "14368001",
            "14368003",
            "14368008",
            "14368011",
            "25854001",
            "25854098",
            "25854140",
            "25855003",
            "25855014",
            "25855021",
            "25864001",
            "25864148",
            "25864150",
            "25873098",
            "25873108",
            "25890001",
            "25890018",
            "25993004",
            "25993143",
            "25993201",
            "27099001",
            "27099003",
            "27099018",
            "29074003",
            "29074018",
            "99389001",
            "99389008",
            "99389031",
            "99585013",
            "99585014",
            "99585001",
            "99585003",
            "25868001",
            "10610001",
            "10610002",
            "10610011",
            "10610012",
            "10564003",
            "10564007",
            "25890003",
            "10536002",
            "10536008",
            "10536009",
            "10547008",
            "10547011",
            "10547023",
            "10559003",
            "10559008",
            "10559014",
            "10559021",
            "10624003",
            "10624004",
            "10624007",
            "10624023",
            "14387006",
            "10597001",
            "10597003",
            "10597011",
            "10597021",
            "10604001",
            "10604002",
            "10604005",
            "10604011",
            "37255001",
            "37255005",
            "37255010",
            "37255012",
            "37258001",
            "37258012",
            "73319001",
            "73319002",
            "73319005",
            "73319013",
            "73319057",
            "73319138",
            "73319226",
            "10591001",
            "10591003",
            "10591008",
            "10591032",
            "51634001",
            "51634004",
            "51634008",
            "97556001",
            "97556012",
            "97556014",
            "14337005",
            "25625001",
            "25625004",
            "27070085",
            "27070086",
            "27070089",
            "27071085",
            "27071086",
            "27071089",
            "27072085",
            "27072086",
            "27072089",
            "27073085",
            "27073086",
            "27073089",
            "27074085",
            "27074088",
            "27074089",
            "27076085",
            "27076088",
            "27076089",
            "28454001",
            "31073029",
            "31073138",
            "31073023",
            "10600003",
            "10600021",
            "13076001",
            "13076005",
            "14384001",
            "14384005",
            "15035003",
            "15035008",
            "15035021",
            "17038005",
            "17038007",
            "17038009",
            "23159005",
            "23159012",
            "23159057",
            "25703017",
            "25703012",
            "25841001",
            "25841010",
            "25841091",
            "25850007",
            "25850030",
            "26077001",
            "26077020",
            "26077021",
            "27029002",
            "27029003",
            "27029007",
            "27029008",
            "27043001",
            "27043014",
            "12063002",
            "12063003",
            "12063008",
            "12063021",
            "31058001",
            "71208003",
            "71208005",
            "71208001",
            "72543239",
            "72543245",
            "72543235",
            "94583012",
            "94583013",
            "94585012",
            "94585013",
            "94591001",
            "94592001",
            "94595005",
            "99272012",
            "99272013",
            "10453001",
            "10453002",
            "10453003",
            "10453007",
            "10453021",
            "10614001",
            "10614003",
            "10614018",
            "10614021",
            "10622003",
            "10622021",
            "10622035",
            "13086003",
            "13086021",
            "13086035",
            "15030002",
            "15030003",
            "15030008",
            "15030021",
            "15031002",
            "15031003",
            "15031008",
            "15031009",
            "23038007",
            "23038009",
            "23038011",
            "25642003",
            "25642009",
            "25642011",
            "25687001",
            "25687011",
            "25687031",
            "25687034",
            "25862001",
            "25862152",
            "25863152",
            "25863001",
            "25863098",
            "25903007",
            "25903204",
            "25903037",
            "25954037",
            "33051003",
            "33051008",
            "37317001",
            "37317014",
            "40306001",
            "40306003",
            "40306005",
            "58903002",
            "58903005",
            "58903001",
            "66090001",
            "66090003",
            "91004004",
            "91004239",
            "91004248",
            "91006004",
            "91006239",
            "91006248",
            "91008004",
            "91008239",
            "91008248",
            "25702011",
            "25802032",
            "25921098",
            "25921205",
            "25921014",
            "25888001",
            "25888008",
            "25888037",
            "13083001",
            "13083008",
            "25633008",
            "25695020",
            "25695004",
            "25695037",
            "25708003",
            "25708007",
            "25887001",
            "25909001",
            "25909003",
            "25909196",
            "25923120",
            "25923202",
            "25939021",
            "25939199",
            "25965008",
            "25965225",
            "25965212",
            "27091001",
            "27091098",
            "27091152",
            "94651004",
            "94651239",
            "94651248",
            "94655004",
            "94655239",
            "94655248",
            "13083011",
            "13083031",
            "25923199",
            "10446028",
            "10446003",
            "10533003",
            "10533025",
            "10533034",
            "10615001",
            "10615008",
            "10615011",
            "10615031",
            "13056014",
            "13056008",
            "13070003",
            "13070008",
            "13070023",
            "14307008",
            "14325011",
            "14335002",
            "23151009",
            "23161014",
            "23161019",
            "23165001",
            "23165003",
            "23165092",
            "25662020",
            "25702007",
            "25702028",
            "25797023",
            "25797007",
            "25797001",
            "25843001",
            "25856003",
            "25856014",
            "25856021",
            "25858001",
            "25858003",
            "25858004",
            "25875001",
            "25875011",
            "25875176",
            "25910009",
            "25910011",
            "25911009",
            "25911011",
            "25939202",
            "26081007",
            "26081028",
            "27075085",
            "27075088",
            "27075089",
            "27078085",
            "27078088",
            "27078089",
            "28511003",
            "37317005",
            "51707002",
            "51707008",
            "51707013",
            "51707022",
            "91114004",
            "91114240",
            "91114326",
            "91139004",
            "91139314",
            "91139323",
            "91140004",
            "91140323",
            "91142004",
            "91142314",
            "91142323",
            "96952001",
            "96952003",
            "96952014",
            "96952031",
            "99821005",
            "99821014",
            "99821011",
            "99821001",
            "10630009",
            "10630011",
            "10630008",
            "10446011",
            "10446024",
            "25662030",
            "25662004",
            "25662003",
            "25695011",
            "25797037",
            "25802011",
            "25802023",
            "25843003",
            "25843023",
            "25843030",
            "25868098",
            "27036001",
            "27036020",
            "34302005",
            "34302010",
            "34302014",
            "34304001",
            "34304010",
            "34304014",
            "34305001",
            "34306001",
            "37254001",
            "37254010",
            "37259001",
            "37260001",
            "37260005",
            "37260138",
            "37261001",
            "37261005",
            "37261031",
            "37261138",
            "37262001",
            "37275014",
            "37276001",
            "37276005",
            "37276010",
            "37276014",
            "73277001",
            "37278001",
            "37280001",
            "37280014",
            "37281001",
            "37281005",
            "37281014",
            "37281138",
            "37282001",
            "37282138",
            "37283010",
            "37283001",
            "37283005",
            "37284001",
            "37284014",
            "37327001",
            "37313014",
            "37313011",
            "37313138",
            "37313001",
            "37313005",
            "37314001",
            "37315001",
            "37316001",
            "37316014",
            "37318001",
            "73320057",
            "73320013",
            "73320001",
            "73320226",
            "37322013",
            "37322001",
            "37322010",
            "37322014",
            "37323001",
            "37323011",
            "37323014",
            "37324001",
            "37324014",
            "37325001",
            "37325011",
            "37325014",
            "37325138",
            "37329001",
            "37329013",
            "37329014",
            "37329138",
            "37330013",
            "37330014",
            "37330001",
            "37257001",
            "10564014",
            "10567001",
            "10567008",
            "10567029",
            "10584004",
            "10584005",
            "10584007",
            "10588001",
            "10588004",
            "10593001",
            "10593012",
            "10595003",
            "10595006",
            "10595008",
            "10599003",
            "10599004",
            "10599021",
            "10609003",
            "10609005",
            "10609011",
            "10613008",
            "10613011",
            "10613033",
            "10613034",
            "14372003",
            "14372005",
            "14372011",
            "91140314",
            "37324011",
            "13084008",
            "14373003",
            "14373005",
            "14373011",
            "14376011",
            "14377008",
            "14377011",
            "14377012",
            "14378008",
            "14378011",
            "14378012",
            "14379004",
            "14379008",
            "14379034",
            "25666005",
            "25666012",
            "25666031",
            "25666033",
            "25680005",
            "25680034",
            "25840001",
            "25986230",
            "25986231",
            "25986232",
            "28397003",
            "28397011",
            "29055012",
            "29055033",
            "31006003",
            "25666034",
            "42015008",
            "42015023",
            "72198005",
            "72198034",
            "72198209",
            "72201034",
            "72201209",
            "72201005",
            "75002005",
            "75002014",
            "75002034",
            "75002171",
            "85966001",
            "85966005",
            "85966034",
            "85966209",
            "85966273",
            "85967001",
            "85967005",
            "85967034",
            "85967209",
            "85967273",
            "85968001",
            "85968005",
            "85968171",
            "85968209",
            "85968273",
            "91079001",
            "91079008",
            "91079012",
            "95253001",
            "95297001",
            "95298001",
            "72198171",
            "37262138",
            "14362001",
            "14362003",
            "14362008",
            "14365003",
            "14365008",
            "14365032",
            "14377034",
            "14378034",
            "25840010",
            "29055005",
            "72198001",
            "85966171",
            "85967171",
            "95297004",
            "95297028",
            "95298003",
            "95298004",
            "28307001",
            "28307004",
            "28307006",
            "28307019",
            "28371001",
            "28371003",
            "28371008",
            "28371034",
            "28373001",
            "28373003",
            "28373008",
            "28373034",
            "72201171",
            "85968034",
            "72198273",
            "72201273",
            "23161011",
            "10601003",
            "10601004",
            "10601021",
            "25695009",
            "25801003",
            "25801005",
            "25846003",
            "25846011",
            "25846014",
            "25865001",
            "25865148",
            "25865149",
            "25865150",
            "25867001",
            "25867011",
            "91122247",
            "91122252",
            "91124004",
            "91124241",
            "91124254",
            "91127004",
            "91127241",
            "91127254",
            "91129252",
            "91129254",
            "91129004",
            "96029011",
            "96029013",
            "96029055",
            "25860151",
            "25861003",
            "25861005",
            "25861151",
            "25869172",
            "91084004",
            "91084307",
            "91084323",
            "91085004",
            "91085085",
            "91085254",
            "91089235",
            "91089307",
            "91089321",
            "91090004",
            "91090296",
            "91090324",
            "91109244",
            "91109004",
            "91109247",
            "91117004",
            "91117240",
            "91117326",
            "91131004",
            "91131241",
            "91131290",
            "96921001",
            "96921010",
            "96921013",
            "96921031",
            "96926001",
            "96926003",
            "96926005",
            "96926031",
            "96929001",
            "96929003",
            "96929010",
            "96929031",
            "96929171",
            "25703007",
            "25709007",
            "25967225",
            "25967008",
            "20386003",
            "20386008",
            "23163005",
            "23163009",
            "23169003",
            "23169010",
            "23169101",
            "25634004",
            "25634017",
            "25648003",
            "25648005",
            "25648008",
            "25825003",
            "25825011",
            "25825023",
            "25852096",
            "25852106",
            "25853106",
            "25853096",
            "25879099",
            "25879153",
            "25879154",
            "25933216",
            "25983120",
            "25983218",
            "14376003",
            "14376001",
            "14376021",
            "10605001",
            "10606001",
            "10606002",
            "10606005",
            "10606011",
            "10632002",
            "10632011",
            "10633002",
            "10633011",
            "11050002",
            "11050023",
            "11057001",
            "11057011",
            "11057007",
            "11060001",
            "11060008",
            "12046009",
            "12046021",
            "12046023",
            "14251003",
            "14251009",
            "14251023",
            "14382003",
            "14382008",
            "14382011",
            "14383003",
            "14383008",
            "14383011",
            "25636004",
            "25636003",
            "25636023",
            "25660003",
            "25660004",
            "25660030",
            "25678001",
            "25678003",
            "25678009",
            "25694009",
            "25694037",
            "25694011",
            "25694020",
            "25701004",
            "25701008",
            "25701011",
            "25701028",
            "25705008",
            "25705023",
            "25705029",
            "25705037",
            "25712003",
            "25712005",
            "25712007",
            "25712011",
            "25826003",
            "25900005",
            "25900007",
            "25900011",
            "25926003",
            "25926009",
            "25938011",
            "25938023",
            "25950003",
            "25950023",
            "25966008",
            "25966225",
            "25985003",
            "25985011",
            "25985263",
            "26071004",
            "26071005",
            "26071022",
            "26082023",
            "26082029",
            "26082037",
            "29058003",
            "29058007",
            "29058011",
            "29075099",
            "51488001",
            "51488008",
            "91076235",
            "91076245",
            "91076288",
            "91082004",
            "91082296",
            "91082324",
            "91146004",
            "91146314",
            "91146323",
            "95299001",
            "95299002",
            "95299004",
            "95299028",
            "95300004",
            "96028003",
            "96028011",
            "96032001",
            "96032008",
            "96032031",
            "98078235",
            "98078288",
            "98078289",
            "98079235",
            "98079288",
            "98079289",
            "98080235",
            "98080288",
            "98080289",
            "51488014",
            "51488005",
            "10506008",
            "10520002",
            "10520008",
            "10520020",
            "10557003",
            "10557011",
            "11030003",
            "11030007",
            "11030008",
            "11061005",
            "11061011",
            "11061014",
            "11061023",
            "11062011",
            "11062014",
            "11062023",
            "12026001",
            "12026008",
            "12026031",
            "12041001",
            "12041003",
            "13080001",
            "13080003",
            "13080018",
            "13080021",
            "13089011",
            "13089023",
            "13090003",
            "13090011",
            "13090023",
            "14348005",
            "14423008",
            "14423011",
            "14423054",
            "25651005",
            "25682007",
            "25682008",
            "25682011",
            "25682028",
            "25924204",
            "25970013",
            "26072002",
            "26072005",
            "26072011",
            "26072014",
            "26113228",
            "27026011",
            "27027002",
            "27027003",
            "27027001",
            "27027005",
            "27027007",
            "27027008",
            "27038005",
            "27051011",
            "27051008",
            "27104007",
            "27113003",
            "27119011",
            "28338003",
            "28338005",
            "28338008",
            "28338010",
            "28338020",
            "28362004",
            "28362005",
            "28362020",
            "28398001",
            "28398012",
            "28469001",
            "33124011",
            "33126011",
            "72487003",
            "72487023",
            "75001005",
            "75001001",
            "75001012",
            "75001209",
            "91081001",
            "91081008",
            "91081012",
            "91081041",
            "93211012",
            "93211031",
            "93211001",
            "96054001",
            "96054021",
            "98044003",
            "98044004",
            "98044008",
            "98907001",
            "98907013",
            "98907014",
            "98907025",
            "98910001",
            "98910005",
            "98910014",
            "98913011",
            "98913013",
            "98913008",
            "98914001",
            "98914013",
            "98934001",
            "98934013",
            "98934024",
            "99343001",
            "10446023",
            "10506002",
            "11062053",
            "13056005",
            "20386004",
            "25636007",
            "28313004",
            "28313014",
            "91122004",
            "95300001",
            "95300003",
            "96054008",
            "96926010",
            "96926012",
            "98046003",
            "98046002",
            "98046008",
            "98906001",
            "98906031",
            "98906013",
            "33121057",
            "33121031",
            "33121001",
            "28307023",
            "30018031",
            "30018010",
            "30018001",
            "30018057",
            "51469022",
            "51469023",
            "51469005",
            "51469032",
            "27028002",
            "27028003",
            "27028007",
            "27028008",
            "27058007",
            "96950001",
            "91117069",
            "95298008",
            "10743172",
            "10743174",
            "10743011",
            "15050021",
            "15050012",
            "15052001",
            "15052021",
            "15052098",
            "34303001",
            "34303010",
            "37253001",
            "37253010",
            "37253005",
            "37256001",
            "87014011",
            "87014008",
            "13116129",
            "13116130",
            "13116131",
            "14422003",
            "14422009",
            "14422058",
            "14422004",
            "14472108",
            "14472060",
            "14472021",
            "15059024",
            "15059092",
            "15059003",
            "11075024",
            "11075092",
            "13126092",
            "13126024",
            "13126003",
            "15060092",
            "15060024",
            "15060003",
            "79717001",
            "79717003",
            "79717005",
            "94608003",
            "94608001",
            "10635004",
            "10640002",
            "10640003",
            "10640011",
            "10644004",
            "10644003",
            "10644007",
            "10644011",
            "10654004",
            "10654019",
            "10654020",
            "26116341",
            "26128005",
            "26128004",
            "26128003",
            "26124005",
            "26124012",
            "26124003",
            "26124011",
            "26123138",
            "26123014",
            "26123005",
            "29107171",
            "29107138",
            "28562012",
            "94709249",
            "27145012",
            "27145139",
            "27145058",
            "34101005",
            "34101012",
            "34061011",
            "34061013",
            "34061005",
            "34069012",
            "34068012",
            "34068003",
            "34055341",
            "34062020",
            "34062004",
            "34062003",
            "94718235",
            "35039001",
            "27146011",
            "27146005",
            "27146023",
            "28568005",
            "28568020",
            "28568001",
            "35038380",
            "10655004",
            "10655019",
            "10655020",
            "10663008",
            "10663011",
            "10663054",
            "10664001",
            "10664018",
            "10664021",
            "10665001",
            "10665018",
            "10665021",
            "10679011",
            "10679001",
            "10692029",
            "10692016",
            "10692032",
            "10697009",
            "10697003",
            "10697011",
            "10697020",
            "10699004",
            "10699016",
            "10699020",
            "10700004",
            "10700020",
            "10700016",
            "10701004",
            "10701016",
            "10701020",
            "10702004",
            "10702020",
            "10702016",
            "10730012",
            "10730123",
            "10730122",
            "10730121",
            "10751034",
            "10751165",
            "10752034",
            "10752165",
            "11070023",
            "11070021",
            "11070054",
            "12076009",
            "12076170",
            "12076003",
            "12076032",
            "12085008",
            "12085054",
            "12085011",
            "12091011",
            "12091003",
            "12091023",
            "12091004",
            "12094194",
            "12094195",
            "12095153",
            "12095099",
            "12095154",
            "12095023",
            "12096034",
            "12096165",
            "13099001",
            "13099004",
            "25284003",
            "25284004",
            "25284008",
            "25284009",
            "25287004",
            "25644001",
            "25644020",
            "25644021",
            "94606003",
            "94606001",
            "89395363",
            "25954007",
            "34106003",
            "34106004",
            "34106387",
            "28593004",
            "28593387",
            "28593003",
            "28595552",
            "28595570",
            "28595600",
            "34107570",
            "34107552",
            "27166501",
            "27166600",
            "27166513",
            "28598512",
            "28598541",
            "28598501",
            "29121512",
            "29121501",
            "34115570",
            "34115512",
            "27171541",
            "27171552",
            "27171512",
            "26130513",
            "26130600",
            "26130501",
            "34108513",
            "34108600",
            "34108501",
            "29121541",
        }

        estoque_preco_df = estoque_preco_df[
            ~estoque_preco_df.apply(
                lambda row: row.astype(str)
                .apply(
                    lambda x: any(codigo in x for codigo in codigos_excluir)
                )
                .any(),
                axis=1,
            )
        ]

    if cliente == "una":
        estoque_preco_df = estoque_preco_df[
            ~estoque_preco_df.apply(
                lambda row: row.astype(str).str.contains("SC").any(),
                axis=1,
            )
        ]

    if cliente == "una":
        estoque_preco_df = estoque_preco_df[
            ~estoque_preco_df.apply(
                lambda row: row.astype(str).str.contains("CX").any(),
                axis=1,
            )
        ]

    if cliente == "una":
        estoque_preco_df = estoque_preco_df[
            ~estoque_preco_df.apply(
                lambda row: row.astype(str).str.contains("VP").any(), axis=1
            )
        ]

    if cliente == "othergirls":
        estoque_preco_df = estoque_preco_df[
            ~estoque_preco_df.apply(
                lambda row: row.astype(str).str.contains("BOHOCARD").any(),
                axis=1,
            )
        ]

    if cliente == "mun":
        estoque_preco_df = estoque_preco_df[
            ~estoque_preco_df.apply(
                lambda row: row.astype(str).str.contains("VP").any(), axis=1
            )
        ]

    # Quantidade total
    estoque_preco_total_df = pd.DataFrame(
        {
            "Quantidade Estoque": [estoque_preco_df["Quantidade"].sum()],
            "Poder de Venda Total": [estoque_preco_df["Poder de Venda"].sum()],
            "Custo do Estoque": [estoque_preco_df["Custo Total"].sum()],
        }
    )

    estoque_preco_total_df["MKP"] = (
        estoque_preco_total_df["Poder de Venda Total"]
        / estoque_preco_total_df["Custo do Estoque"]
    )

    estoque_preco_total_df["Preço Médio"] = (
        estoque_preco_total_df["Poder de Venda Total"]
        / estoque_preco_total_df["Quantidade Estoque"]
    )

    ########## STOCK VALUE PER DISCOUNT RANGE ##########

    # Round the 'Desconto' values to a reasonable precision
    precision = 5  # Adjust the precision as needed
    estoque_preco_df["Desconto"] = estoque_preco_df["Desconto"].round(
        precision
    )

    # Create bins for the 'Desconto' column
    bins = [-float("inf"), 0, 0.25, 0.45, 0.6, float("inf")]
    labels = [
        "E: <= 0%",
        "E: > 0% and <= 25%",
        "E: > 25% and <= 45%",
        "E: > 45% and <= 60%",
        "E: > 60%",
    ]

    # Add a new column 'Desconto Group' based on the bins
    estoque_preco_df["Faixa de Desconto"] = pd.cut(
        estoque_preco_df["Desconto"], bins=bins, labels=labels
    )

    # Use groupby to sum 'Poder de Venda' for each 'Desconto Group'
    result = (
        estoque_preco_df.groupby("Faixa de Desconto", observed=False)[
            "Poder de Venda"
        ]
        .sum()
        .reset_index()
    )

    # Create a new DataFrame 'estoque_desconto' with the results
    estoque_desconto = pd.DataFrame(result)

    # CHANGE COLUMNS FOR LINES

    estoque_desconto_final = estoque_desconto.T

    ############################ VENDAS ##############################

    cols1 = [
        "Preco de Venda Produto Un",
        "Total do Pedido",
        "Quantidade",
        "Desconto item",
    ]

    # LIMPAR E ORGANIZAR DADOS

    f_vendas_path = rf"{os.getenv('path_mage')}m&p\Relatorios Diarios\{dataname}\{cliente}_Vendas_{dataname}.csv"
    df_vendas = pd.read_csv(
        f_vendas_path,
        sep=";",
        dtype={
            "Código SKU": str,
            "Preco de Venda": float,
            "Total do Pedido": float,
            "Quantidade": str,
        },
    ).rename(
        columns={
            "Preço de Venda": "Preco de Venda Produto Un",
            "Situação": "Situacao",
            "Código SKU": "Codigo SKU",
            "Número do Pedido": "Numero do Pedido",
            "Total do pedido": "Total do Pedido",
            "Preço de Custo": "Ignorar",
        }
    )

    df_vendas.dtypes

    for col in cols1:
        df_vendas[col] = df_vendas[col].str.replace(".", "")
        df_vendas[col] = df_vendas[col].str.replace(",", ".").astype(float)

    # TEMPORARY FIX TO 'nobu'SKU, HAVING DIFFICULT SINCE SKU STARTS WITH 0

    if cliente == "nobu":
        df_vendas["Codigo SKU"] = df_vendas["Codigo SKU"].astype(int)

    if cliente == "nobu":
        df_vendas["Codigo SKU"] = df_vendas["Codigo SKU"].astype(str)

    if cliente == "kle":
        df_vendas["Codigo SKU"] = df_vendas["Codigo SKU"].astype(str)

    # Tirar vendas que nao sao de cliente final

    if cliente == "french":
        df_vendas = df_vendas[
            ~df_vendas.apply(
                lambda row: row.astype(str)
                .str.contains("LF CONFECCOES")
                .any(),
                axis=1,
            )
        ]

    if cliente == "french":
        df_vendas = df_vendas[
            ~df_vendas.apply(
                lambda row: row.astype(str).str.contains("GUARNIERIUS").any(),
                axis=1,
            )
        ]
    # SKU to Cod. Modelo + Cor ON df_vendas

    ####### CHANGE SO IT CHANGES TO EACH CLIENT

    for c_sku in c_list_sku:
        if cliente in c_sku["Cliente"]:
            index = c_sku["Index"]
            if index == 0:
                df_vendas["Cod. Modelo + Cor"] = df_vendas["Codigo SKU"].apply(
                    lambda x: x.split("-")[0]
                )
            else:
                df_vendas["Cod. Modelo + Cor"] = df_vendas[
                    "Codigo SKU"
                ].str.slice(0, index)
            break
    else:
        print(f"The value '{cliente}' is not present in any c_list_sku.")

    # ADD COST OF PRODUCT, COD. MODELO + COR, PRECO ANTERIOR , DESCONTO TO df_vendas

    columns_to_keep1 = [
        "Preco de Custo",
        "Cod. Modelo + Cor",
        "Preco Anterior",
    ]
    df_produtos2 = df_produtos[
        columns_to_keep1
    ].copy()  # Make a copy to avoid modifying the original DataFrame

    if cliente == "kle":
        df_produtos2 = df_produtos2.drop_duplicates(
            subset=["Cod. Modelo + Cor"]
        )

    df_vendas_ped_prod = pd.merge(
        df_vendas, df_produtos2, on="Cod. Modelo + Cor", how="left"
    )

    # ADD CMV TO df_vendas

    df_vendas_ped_prod["CMV"] = (
        df_vendas_ped_prod["Preco de Custo"] * df_vendas_ped_prod["Quantidade"]
    )

    # CALCULAR VALOR DE VENDA PRODUTO TOTAL TO df_vendas

    df_vendas_ped_prod["Valor de Venda Produto Total"] = (
        df_vendas_ped_prod["Preco de Venda Produto Un"]
        * df_vendas_ped_prod["Quantidade"]
    ) - df_vendas_ped_prod["Desconto item"]

    # COLUMNS TO KEEP ON df_vendas_prod

    columns_to_keep1 = [
        "Data",
        "Situacao",
        "Cod. Modelo + Cor",
        "Quantidade",
        "Preco de Venda Produto Un",
        "Valor de Venda Produto Total",
        "Preco Anterior",
    ]
    df_vendas_prod = df_vendas_ped_prod[
        columns_to_keep1
    ].copy()  # Make a copy to avoid modifying the original DataFrame

    # ADD COLUMN DISCONT ON df_vendas_prod

    df_vendas_prod["Desconto"] = 1 - (
        df_vendas_prod["Preco de Venda Produto Un"]
        / df_vendas_prod["Preco Anterior"]
    )

    # CALCULATE SALES VALUE OF ORDERS WITH ACCEPTABLE SITUATION: ATENDIDO; EM ABERTO; PRONTO PARA PICKING

    columns_to_keep2 = [
        "Data",
        "Numero do Pedido",
        "Situacao",
        "Total do Pedido",
        "CMV",
        "Valor de Venda Produto Total",
    ]
    df_vendas_ped = df_vendas_ped_prod[
        columns_to_keep2
    ].copy()  # Make a copy to avoid modifying the original DataFrame

    # Filter rows based on conditions in 'Situacao'

    condition = df_vendas_ped["Situacao"].isin(
        ["Em aberto", "Atendido", "Pronto para picking"]
    )
    filtered_df = df_vendas_ped[condition]

    # Sum 'Total do Pedido' based on the filtered conditions

    df_vendas_ped_total = (
        filtered_df.groupby("Data")["Total do Pedido"].sum().reset_index()
    )

    # Rename the 'Total do Pedido' column to 'Valor Vendas Total'

    df_vendas_ped_total = df_vendas_ped_total.rename(
        columns={"Total do Pedido": "Valor Vendas Total"}
    )

    # ADD CMV TO df_vendas_ped_total

    df_vendas_ped_total["CMV Total"] = (
        filtered_df.groupby("Data")["CMV"].sum().reset_index()["CMV"]
    )

    # ADD VALOR DE VENDA PRODUTO TOTAL TO df_vendas_ped_total

    df_vendas_ped_total["Valor de Venda Produto Total"] = (
        filtered_df.groupby("Data")["Valor de Venda Produto Total"]
        .sum()
        .reset_index()["Valor de Venda Produto Total"]
    )

    # ADD MKP TOTAL TO df_vendas_ped_total

    df_vendas_ped_total["MKP Total"] = (
        df_vendas_ped_total["Valor de Venda Produto Total"]
        / df_vendas_ped_total["CMV Total"]
    )

    # ADD QUANTITY OF ORDERS TO df_vendas_ped_total

    df_vendas_ped_total["Quantidade Pedidos"] = filtered_df[
        "Numero do Pedido"
    ].nunique()

    # ADD TICKET MEDIO TO df_vendas_ped_total

    df_vendas_ped_total["Ticket Medio"] = (
        df_vendas_ped_total["Valor Vendas Total"]
        / df_vendas_ped_total["Quantidade Pedidos"]
    )

    ########## VENDAS POR DESCONTO ##########

    ### CALCULATE SALES VALUE OF ORDERS WITH ACCEPTABLE SITUATION: ATENDIDO; EM ABERTO; PRONTO PARA PICKING ###

    columns_to_keep2 = [
        "Data",
        "Desconto",
        "Situacao",
        "Valor de Venda Produto Total",
    ]
    df_vendas_prod = df_vendas_prod[
        columns_to_keep2
    ].copy()  # Make a copy to avoid modifying the original DataFrame

    # # Filter rows based on conditions in 'Situacao'

    condition = df_vendas_prod["Situacao"].isin(
        ["Em aberto", "Atendido", "Pronto para picking"]
    )
    filtered_df2 = df_vendas_prod[condition]

    # # Sum 'Total do Pedido' based on the filtered conditions

    df_vendas_prod_situacao = filtered_df2.copy()

    # ### SEPARATE SALES PER DISCOUNT ###

    # # Round the 'Desconto' values to a reasonable precision
    precision = 5  # Adjust the precision as needed
    df_vendas_prod_situacao.loc[:, "Desconto"] = df_vendas_prod_situacao[
        "Desconto"
    ].round(precision)

    # Create bins for the 'Desconto' column
    bins = [-float("inf"), 0, 0.25, 0.45, 0.6, float("inf")]
    labels = [
        "V: <= 0%",
        "V: > 0% and <= 25%",
        "V: > 25% and <= 45%",
        "V: > 45% and <= 60%",
        "V: > 60%",
    ]

    # Add a new column 'Desconto Group' based on the bins
    df_vendas_prod_situacao.loc[:, "Faixa de Desconto"] = pd.cut(
        df_vendas_prod_situacao["Desconto"], bins=bins, labels=labels
    )

    # SUBSTITUTE ANY NAN BY 0 IN COLUMN DESCONTO POR FAIXA DE PREÇO

    df_vendas_prod_situacao["Faixa de Desconto"] = df_vendas_prod_situacao[
        "Faixa de Desconto"
    ].fillna("V: <= 0%")

    # Use groupby to sum 'Poder de Venda' for each 'Desconto Group'
    result1 = (
        df_vendas_prod_situacao.groupby("Faixa de Desconto", observed=False)[
            "Valor de Venda Produto Total"
        ]
        .sum()
        .reset_index()
    )

    # # Create a new DataFrame 'estoque_desconto' with the results
    venda_desconto = pd.DataFrame(result1)
    venda_desconto_final = venda_desconto.T

    # %% VENDAS + ESTOQUE (JUNTAR DFS DE VENDA E ESTOQUE)

    # Colocar segunda coluna como nome coluna

    # Assuming 'estoque_desconto_final' and 'venda_desconto_final' are your DataFrames
    estoque_desconto_final.columns = estoque_desconto_final.iloc[0]
    venda_desconto_final.columns = venda_desconto_final.iloc[0]

    # Drop the first row (index 0) after setting the column names
    estoque_desconto_final = estoque_desconto_final.iloc[1:].reset_index(
        drop=True
    )
    venda_desconto_final = venda_desconto_final.iloc[1:].reset_index(drop=True)

    # ACRESCENTAR MÊS E ANO NAS COLUNAS

    # df_vendas_ped_total["Mês"] = pd.to_datetime(
    #     df_vendas_ped_total["Data"]
    # ).dt.month
    # df_vendas_ped_total["Ano"] = pd.to_datetime(
    #     df_vendas_ped_total["Data"]
    # ).dt.year

    df_vendas_ped_total["Mês"] = pd.to_datetime(
        df_vendas_ped_total["Data"], dayfirst=True
    ).dt.month
    df_vendas_ped_total["Ano"] = pd.to_datetime(
        df_vendas_ped_total["Data"], dayfirst=True
    ).dt.year

    # Juntar todos os dfs

    rel_ger = pd.concat(
        [
            df_vendas_ped_total,
            estoque_preco_total_df,
            venda_desconto_final,
            estoque_desconto_final,
        ],
        axis=1,
    )

    # %% REORDER COLUMNS IN FINAL DF

    ########### REORDER COLUMNS ###########

    desired_order = [
        "Data",
        "Mês",
        "Ano",
        "Valor Vendas Total",
        "MKP Total",
        "Quantidade Pedidos",
        "CMV Total",
        "Ticket Medio",
        "Quantidade Estoque",
        "Poder de Venda Total",
        "Preço Médio",
        "MKP",
        "V: <= 0%",
        "V: > 0% and <= 25%",
        "V: > 25% and <= 45%",
        "V: > 45% and <= 60%",
        "V: > 60%",
        "E: <= 0%",
        "E: > 0% and <= 25%",
        "E: > 25% and <= 45%",
        "E: > 45% and <= 60%",
        "E: > 60%",
    ]

    df_rel_ger_ecco = rel_ger[desired_order]

    # %% FB ADS DATA

    # Em casos quando o cliente ainda não tem fb, tentar bater no fb mas se nao der apenas continuar
    try:
        df_rel_ger_fb = fb.download_fb(cliente, dataname)

        # CONCAT 'df_rel_ger_ecco', 'df_rel_ger_fb'
        df_rel_ger = pd.concat([df_rel_ger_ecco, df_rel_ger_fb], axis=1)

    except Exception:
        print(f"Erro ao tentar acessar dados do fb do cliente: {cliente}")
        df_rel_ger = df_rel_ger_ecco.copy()
        pass

    # # %% CONCAT 'df_rel_ger_ecco', 'df_rel_ger_fb'

    # df_rel_ger = pd.concat([df_rel_ger_ecco, df_rel_ger_fb], axis=1)

    # %% IF SALES = 0, SUBSTITUTE NAN FOR 0 AND PUT DATE

    df_rel_ger["Data"] = datatxt
    df_rel_ger["Mês"] = pd.to_datetime(
        df_rel_ger["Data"], dayfirst=True
    ).dt.month
    df_rel_ger["Ano"] = pd.to_datetime(
        df_rel_ger["Data"], dayfirst=True
    ).dt.year

    df_rel_ger.fillna(0, inplace=True)

    # %% UPDATE GOOGLE SHEETS

    gc = gspread.oauth()

    sh = gc.open(
        f"{dic_nomes[cliente]} - Relatório Gerencial E-Commerce"
    ).worksheet("Diário")

    df_list_final = df_rel_ger.values.tolist()

    print(f"{dic_nomes[cliente]} - Relatório Gerencial E-Commerce")

    sh.append_rows(df_list_final, table_range="A1")
